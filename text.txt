// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductStatus {
  PUBLISHED
  DRAFT
  SUSPENDED
  OUTOFSTOCK
}

enum ProductType {
  SIMPLE
  VARIABLE
}

//Define a product model
model Product {
  id  String  @id @default(uuid())
  name  String
  slug  String?
  description String?
  typeId  Int?
  price Float
  shopId  Int //Link this to the shop model (1-1 relation)
  salePrice Int
  language  String
  minPrice  Float
  maxPrice  Float
  sku Int @id @unique @default(autoincrement())
  quantity  Int
  inStock Boolean
  isTaxable Boolean
  shippingClassId Int? @id @unique @default(autoincrement())
  status  ProductStatus @default(PUBLISHED)
  productType ProductType @default(SIMPLE)
  height  Int?
  width Int?
  image Image //link this to the image model (1 - 1 relations)
  video String?
  gallery String? //this is an array of the images model, Link it to the Image model
  deletedAt DateTime  @default(now())
  createdAt @createdAt  @default(now())
  updatedAt @updatedAt  @default(now())
  authorId String? // this is tentative, you may need to link it to an author model on a 1-1 relation
  manufacturerId  String //same as above
  isDigital Boolean?
  isExternal  Boolean?
  externalProductUrl  String?
  externalProductButtonNext String?
  ratings Float //You may have to consider linking this to a ratings model on a 1-1 relations
  totalReviews  Int //same as above
  ratingCount Int? //same as above
  myReview  String?
  inWishlist  Boolean?
  categories  String  //this is an array of the category model, link it on a 1-many relation
  shop  String  //this has to be linked to the shop model on 1-1 relation
  type String //Link this to the productType model on a 1-many relations
}


model Image {
  id  String  @id @default(uuid())
  original String
  thumbnail String
  createdAt DateTime @createdAt @default(now())
  updatedAt DateTime @updateAt @default(now())
  product Product @relation(fields:[productId], references: [id])
}